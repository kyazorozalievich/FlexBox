const levels = [
  {
    instruction: "1. –¶–µ–Ω—Ç—Ä–∏—Ä—É–π –∑–≤–µ—Ä—è—Ç –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏",
    correctCSS: "justify-content: center;",
    hint: "–ü–æ–¥—Å–∫–∞–∑–∫–∞: display: flex; justify-content: center;",
  },
  {
    instruction: "2. –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –Ω–∏–∑—É",
    correctCSS: "align-items: flex-end;",
    hint: "–ü–æ–¥—Å–∫–∞–∑–∫–∞: display: flex; align-items: flex-end;",
  },
  {
    instruction: "3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ —Å –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞–º–∏",
    correctCSS: "justify-content: space-between;",
    hint: "–ü–æ–¥—Å–∫–∞–∑–∫–∞: display: flex; justify-content: space-between;",
  },
  {
    instruction: "4. –ü–æ—Å—Ç—Ä–æ–π –∫–æ–ª–æ–Ω–∫—É –∏–∑ –∑–≤–µ—Ä—è—Ç",
    correctCSS: "flex-direction: column;",
    hint: "–ü–æ–¥—Å–∫–∞–∑–∫–∞: display: flex; flex-direction: column;",
  },
  {
    instruction: "5. –î–æ–±–∞–≤—å –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É –∑–≤–µ—Ä—è—Ç–∞–º–∏",
    correctCSS: "gap: 10px;",
    hint: "–ü–æ–¥—Å–∫–∞–∑–∫–∞: display: flex; gap: 10px;",
  },
  {
    instruction: "6. –í–∫–ª—é—á–∏ –ø–µ—Ä–µ–Ω–æ—Å –∑–≤–µ—Ä—è—Ç –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–æ–∫—É",
    correctCSS: "flex-wrap: wrap;",
    hint: "–ü–æ–¥—Å–∫–∞–∑–∫–∞: display: flex; flex-wrap: wrap;",
  },
];

let currentLevel = 0;
let isPracticeMode = false;

function loadLevel() {
  const level = levels[currentLevel];
  document.getElementById("instruction").innerText = level.instruction;
  document.getElementById("hint").innerText = level.hint;
  document.getElementById("cssInput").value = "";
  document.getElementById("feedback").innerText = "";
  document.getElementById("cssInput").disabled = false;
  document.getElementById("nextBtn").style.display = "none";
  document.getElementById("practiceLabel").style.display = "none";
  isPracticeMode = false;
  resetPlayground();
}

function resetPlayground() {
  const box = document.getElementById("playground");
  box.style.cssText = "";
  box.className = "box";
  box.style.display = "flex";
}

function applyCSS(cssText) {
  const box = document.getElementById("playground");
  const styleProps = {};

  const rules = cssText
    .split(";")
    .map((r) => r.trim())
    .filter((r) => r.includes(":"));

  rules.forEach((rule) => {
    let [prop, value] = rule.split(":").map((p) => p.trim());
    if (prop && value) {
      styleProps[prop] = value;
    }
  });

  if (isPracticeMode) {
    Object.entries(styleProps).forEach(([prop, value]) => {
      box.style[prop] = value;
    });
    if (!styleProps["display"] || styleProps["display"] !== "flex") {
      box.style.display = "flex";
    }
  } else {
    if (styleProps["display"] === "flex") {
      Object.entries(styleProps).forEach(([prop, value]) => {
        box.style[prop] = value;
      });
    } else {
      box.style.cssText = "display: flex;";
    }
  }
}

function checkAnswer() {
  const input = document
    .getElementById("cssInput")
    .value.trim()
    .replace(/\s+/g, " ");
  const correct = levels[currentLevel].correctCSS.trim();
  const hasDisplayFlex = input.includes("display: flex");
  const isCorrect = hasDisplayFlex && input.includes(correct);

  applyCSS(input);

  if (isCorrect) {
    document.getElementById("feedback").innerText = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
    document.getElementById("cssInput").disabled = true;
    document.getElementById("nextBtn").style.display = "inline-block";
    localStorage.setItem("currentLevel", currentLevel); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å
  } else {
    document.getElementById("feedback").innerText =
      "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!";
  }
}

function nextLevel() {
  currentLevel++;
  localStorage.setItem("currentLevel", currentLevel); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å

  if (currentLevel < levels.length) {
    loadLevel();
  } else {
    activatePracticeMode();
  }
}

function activatePracticeMode() {
  isPracticeMode = true;
  document.getElementById("instruction").innerText =
    "üéâ –ú–æ–ª–æ–¥–µ—Ü! –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ —É—Ä–æ–≤–Ω–∏!";
  document.getElementById("hint").innerText =
    "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–∞–º ‚Äî –ø–∏—à–∏ –ª—é–±—ã–µ CSS —Å–≤–æ–π—Å—Ç–≤–∞!";
  document.getElementById("cssInput").disabled = false;
  document.getElementById("nextBtn").style.display = "none";
  document.getElementById("practiceLabel").style.display = "block";
  document.getElementById("feedback").innerText = "üë®‚Äçüè´ –ü—Ä–∞–∫—Ç–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞!";
  document.getElementById("cssInput").value = "display: flex;";
  applyCSS("display: flex;");
  localStorage.setItem("currentLevel", levels.length); // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
}

function resetProgress() {
  localStorage.removeItem("currentLevel");
  currentLevel = 0;
  loadLevel();
}

window.onload = function () {
  const savedLevel = parseInt(localStorage.getItem("currentLevel"));
  if (!isNaN(savedLevel)) {
    if (savedLevel >= levels.length) {
      activatePracticeMode();
      return;
    } else {
      currentLevel = savedLevel;
    }
  }
  loadLevel();
};
